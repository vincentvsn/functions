"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DurableOrchestrationContext = void 0;
const classes_1 = require("./classes");
const whenallaction_1 = require("./actions/whenallaction");
const whenanyaction_1 = require("./actions/whenanyaction");
const task_1 = require("./task");
const moment = require("moment");
const replaySchema_1 = require("./replaySchema");
const signalentityaction_1 = require("./actions/signalentityaction");
class DurableOrchestrationContext {
    constructor(state, instanceId, currentUtcDateTime, isReplaying, parentInstanceId, longRunningTimerIntervalDuration, maximumShortTimerDuration, defaultHttpAsyncRequestSleepTimeMillseconds, schemaVersion, input, taskOrchestratorExecutor) {
        this.taskOrchestratorExecutor = taskOrchestratorExecutor;
        this.Task = {
            all: (tasks) => {
                if (this.isDFTaskArray(tasks)) {
                    const action = new whenallaction_1.WhenAllAction(tasks);
                    const task = new task_1.WhenAllTask(tasks, action);
                    return task;
                }
                throw Error("Task.all received a non-valid input. " +
                    "This may occur if it somehow received a non-list input, " +
                    "or if the input list's Tasks were corrupted. Please review your orchestrator code and/or file an issue.");
            },
            any: (tasks) => {
                if (this.isDFTaskArray(tasks)) {
                    const action = new whenanyaction_1.WhenAnyAction(tasks);
                    const task = new task_1.WhenAnyTask(tasks, action);
                    return task;
                }
                throw Error("Task.any received a non-valid input. " +
                    "This may occur if it somehow received a non-list input, " +
                    "or if the input list's Tasks were corrupted. Please review your orchestrator code and/or file an issue.");
            },
        };
        this.state = state;
        this.instanceId = instanceId;
        this.isReplaying = isReplaying;
        this.currentUtcDateTime = currentUtcDateTime;
        this.parentInstanceId = parentInstanceId;
        this.longRunningTimerIntervalDuration = longRunningTimerIntervalDuration
            ? moment.duration(longRunningTimerIntervalDuration)
            : undefined;
        this.maximumShortTimerDuration = maximumShortTimerDuration
            ? moment.duration(maximumShortTimerDuration)
            : undefined;
        this.defaultHttpAsyncRequestSleepTimeMillseconds = defaultHttpAsyncRequestSleepTimeMillseconds;
        this.schemaVersion = schemaVersion;
        this.input = input;
        this.newGuidCounter = 0;
    }
    isDFTaskArray(tasks) {
        return tasks.every((x) => x instanceof task_1.DFTask);
    }
    callActivity(name, input) {
        const newAction = new classes_1.CallActivityAction(name, input);
        const task = new task_1.AtomicTask(false, newAction);
        return task;
    }
    callActivityWithRetry(name, retryOptions, input) {
        const newAction = new classes_1.CallActivityWithRetryAction(name, retryOptions, input);
        const backingTask = new task_1.AtomicTask(false, newAction);
        const task = new task_1.RetryableTask(backingTask, retryOptions, this.taskOrchestratorExecutor);
        return task;
    }
    callEntity(entityId, operationName, operationInput) {
        const newAction = new classes_1.CallEntityAction(entityId, operationName, operationInput);
        const task = new task_1.AtomicTask(false, newAction);
        return task;
    }
    signalEntity(entityId, operationName, operationInput) {
        const action = new signalentityaction_1.SignalEntityAction(entityId, operationName, operationInput);
        this.taskOrchestratorExecutor.recordFireAndForgetAction(action);
    }
    callSubOrchestrator(name, input, instanceId) {
        if (!name) {
            throw new Error("A sub-orchestration function name must be provided when attempting to create a suborchestration");
        }
        const newAction = new classes_1.CallSubOrchestratorAction(name, instanceId, input);
        const task = new task_1.AtomicTask(false, newAction);
        return task;
    }
    callSubOrchestratorWithRetry(name, retryOptions, input, instanceId) {
        if (!name) {
            throw new Error("A sub-orchestration function name must be provided when attempting to create a suborchestration");
        }
        const newAction = new classes_1.CallSubOrchestratorWithRetryAction(name, retryOptions, input, instanceId);
        const backingTask = new task_1.AtomicTask(false, newAction);
        const task = new task_1.RetryableTask(backingTask, retryOptions, this.taskOrchestratorExecutor);
        return task;
    }
    callHttp(method, uri, content, headers, tokenSource, asynchronousPatternEnabled = true) {
        if (content && typeof content !== "string") {
            content = JSON.stringify(content);
        }
        const req = new classes_1.DurableHttpRequest(method, uri, content, headers, tokenSource, asynchronousPatternEnabled);
        const newAction = new classes_1.CallHttpAction(req);
        if (this.schemaVersion >= replaySchema_1.ReplaySchema.V3 && req.asynchronousPatternEnabled) {
            if (!this.defaultHttpAsyncRequestSleepTimeMillseconds) {
                throw Error("A framework-internal error was detected: replay schema version >= V3 is being used, " +
                    "but `defaultHttpAsyncRequestSleepDuration` property is not defined. " +
                    "This is likely an issue with the Durable Functions Extension. " +
                    "Please report this bug here: https://github.com/Azure/azure-functions-durable-js/issues");
            }
            return new task_1.CallHttpWithPollingTask(false, newAction, this, this.taskOrchestratorExecutor, this.defaultHttpAsyncRequestSleepTimeMillseconds);
        }
        return new task_1.AtomicTask(false, newAction);
    }
    continueAsNew(input) {
        const newAction = new classes_1.ContinueAsNewAction(input);
        this.taskOrchestratorExecutor.addToActions(newAction);
        this.taskOrchestratorExecutor.willContinueAsNew = true;
    }
    createTimer(fireAt) {
        const timerAction = new classes_1.CreateTimerAction(fireAt);
        const durationUntilFire = moment.duration(moment(fireAt).diff(this.currentUtcDateTime));
        if (this.schemaVersion >= replaySchema_1.ReplaySchema.V3) {
            if (!this.maximumShortTimerDuration || !this.longRunningTimerIntervalDuration) {
                throw Error("A framework-internal error was detected: replay schema version >= V3 is being used, " +
                    "but one or more of the properties `maximumShortTimerDuration` and `longRunningTimerIntervalDuration` are not defined. " +
                    "This is likely an issue with the Durable Functions Extension. " +
                    "Please report this bug here: https://github.com/Azure/azure-functions-durable-js/issues\n" +
                    `maximumShortTimerDuration: ${this.maximumShortTimerDuration}\n` +
                    `longRunningTimerIntervalDuration: ${this.longRunningTimerIntervalDuration}`);
            }
            if (durationUntilFire > this.maximumShortTimerDuration) {
                return new task_1.LongTimerTask(false, timerAction, this, this.taskOrchestratorExecutor, this.maximumShortTimerDuration.toISOString(), this.longRunningTimerIntervalDuration.toISOString());
            }
        }
        return new task_1.DFTimerTask(false, timerAction);
    }
    getInput() {
        return this.input;
    }
    newGuid(instanceId) {
        const guidNameValue = `${instanceId}_${this.currentUtcDateTime.valueOf()}_${this.newGuidCounter}`;
        this.newGuidCounter++;
        return classes_1.GuidManager.createDeterministicGuid(classes_1.GuidManager.UrlNamespaceValue, guidNameValue);
    }
    setCustomStatus(customStatusObject) {
        this.customStatus = customStatusObject;
    }
    waitForExternalEvent(name) {
        const newAction = new classes_1.WaitForExternalEventAction(name, classes_1.ExternalEventType.ExternalEvent);
        const task = new task_1.AtomicTask(name, newAction);
        return task;
    }
}
exports.DurableOrchestrationContext = DurableOrchestrationContext;
//# sourceMappingURL=durableorchestrationcontext.js.map