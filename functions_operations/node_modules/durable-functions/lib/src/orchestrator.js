"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Orchestrator = void 0;
const classes_1 = require("./classes");
const durableorchestrationcontext_1 = require("./durableorchestrationcontext");
const taskorchestrationexecutor_1 = require("./taskorchestrationexecutor");
const replaySchema_1 = require("./replaySchema");
const durableorchestrationbindinginfo_1 = require("./durableorchestrationbindinginfo");
class Orchestrator {
    constructor(fn) {
        this.fn = fn;
    }
    listen() {
        return this.handle.bind(this);
    }
    handle(context) {
        return __awaiter(this, void 0, void 0, function* () {
            this.taskOrchestrationExecutor = new taskorchestrationexecutor_1.TaskOrchestrationExecutor();
            const orchestrationBinding = classes_1.Utils.getInstancesOf(context.bindings, new durableorchestrationbindinginfo_1.DurableOrchestrationBindingInfoReqFields())[0];
            if (!orchestrationBinding) {
                throw new Error("Could not finding an orchestrationClient binding on context.");
            }
            const state = orchestrationBinding.history;
            const input = orchestrationBinding.input;
            const instanceId = orchestrationBinding.instanceId;
            let upperSchemaVersion;
            const extensionUpperSchemaVersion = orchestrationBinding.upperSchemaVersionNew
                ? orchestrationBinding.upperSchemaVersionNew
                : orchestrationBinding.upperSchemaVersion;
            if (Object.values(replaySchema_1.ReplaySchema).includes(extensionUpperSchemaVersion)) {
                upperSchemaVersion = extensionUpperSchemaVersion;
            }
            else {
                upperSchemaVersion = replaySchema_1.LatestReplaySchema;
            }
            const decisionStartedEvent = classes_1.Utils.ensureNonNull(state.find((e) => e.EventType === classes_1.HistoryEventType.OrchestratorStarted), "The orchestrator can not execute without an OrchestratorStarted event.");
            this.currentUtcDateTime = new Date(decisionStartedEvent.Timestamp);
            if (context.df === undefined) {
                context.df = new durableorchestrationcontext_1.DurableOrchestrationContext(state, instanceId, this.currentUtcDateTime, orchestrationBinding.isReplaying, orchestrationBinding.parentInstanceId, orchestrationBinding.longRunningTimerIntervalDuration, orchestrationBinding.maximumShortTimerDuration, orchestrationBinding.defaultHttpAsyncRequestSleepTimeMillseconds, upperSchemaVersion, input, this.taskOrchestrationExecutor);
            }
            yield this.taskOrchestrationExecutor.execute(context, state, upperSchemaVersion, this.fn);
            return;
        });
    }
}
exports.Orchestrator = Orchestrator;
//# sourceMappingURL=orchestrator.js.map